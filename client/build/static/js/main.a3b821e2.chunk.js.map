{"version":3,"sources":["res/images sync /^/.*$","res/images/cycle_sample.png","comp/cycle/Colors.js","comp/cycle/Cycle.js","comp/Main.js","App.js","serviceWorker.js","index.js"],"names":["map","./cycle_sample.png","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","Colors","props","react_default","a","createElement","className","colors","col","style","backgroundColor","Cycle","_props$cycle","cycle","name","key","category","image","price","inStock","img","require","concat","src","alt","cycle_Colors","CycleList","Main","obj","cycle_Cycle","Component","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0JAAA,IAAAA,EAAA,CACAC,qBAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAJ,EAAAG,GACA,KAAAC,EAAA,IACA,IAAAG,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEA,OAAAH,EAEAF,EAAAQ,KAAA,WACA,OAAAC,OAAAD,KAAAV,IAEAE,EAAAU,QAAAP,EACAQ,EAAAC,QAAAZ,EACAA,EAAAE,GAAA,uBCvBAS,EAAAC,QAAiBR,EAAAS,EAAuB,u7BCgBzBC,SAdA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACCJ,EAAMK,OAAOL,EAAMK,OAAOtB,IAAI,SAAAuB,GAC3B,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYG,MAAO,CAACC,gBAAgBF,OAExD,WCqBAG,EA5BD,SAACT,GAAU,IAAAU,EAE0CV,EAAMW,MAAxDC,GAFQF,EAEbG,IAFaH,EAERE,MAAME,EAFEJ,EAEFI,SAAUC,EAFRL,EAEQK,MAAOC,EAFfN,EAEeM,MAAOX,EAFtBK,EAEsBL,OAAQY,EAF9BP,EAE8BO,QAC7CC,EAAMC,MAAQ,KAAoBC,OAAOL,IAE/C,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKkB,IAAOH,EAAMI,IAAI,QAAQlB,UAAU,eACxCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAaU,GAC5Bb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAASQ,IAE5BX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,UAAgCY,GAChCf,EAAAC,EAAAC,cAACoB,EAAD,CAAQlB,OAASA,IACjBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,aAAoCa,EAAQ,MAAM,MAClDhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,mBCpBlBoB,EAAYL,EAAQ,IAiBXM,mLAXP,OACIxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEPoB,EAAUzC,IAAI,SAAA2C,GAAS,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,CAAOhB,MAAQe,cAN9CE,aCeJC,mLAZX,OACE5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYT,cAN5BG,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3b821e2.chunk.js","sourcesContent":["var map = {\n\t\"./cycle_sample.png\": 30\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;","module.exports = __webpack_public_path__ + \"static/media/cycle_sample.c2245ded.png\";","import React from 'react'\r\n\r\nconst Colors = (props) => {\r\n    return(\r\n        <div>\r\n            <div className=\"colors\">Colors:   \r\n            {props.colors?props.colors.map(col => {\r\n                return(\r\n                    <div className=\"colorGrid\" style={{backgroundColor:col}}></div>\r\n                )\r\n            }):\" N/A\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Colors","import React from 'react'\r\nimport Colors from './Colors'\r\n\r\nconst Cycle = (props) => {\r\n\r\n    const { key, name, category, image, price, colors, inStock } = props.cycle\r\n    const img = require('../../res/images/'.concat(image))\r\n\r\n    return(\r\n        <div className=\"col s6 m4\">\r\n            <div className=\"card z-depth-1 CycleInfo\">\r\n                <div className=\"card-content\">\r\n                    <img src ={ img } alt='Cycle' className=\"CycleImage\" />\r\n                    <div className=\"category\">{ category }</div> \r\n                    <br />\r\n                    <div className=\"name\">{ name }</div>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                    <div className=\"price\">Price: { price }</div>\r\n                    <Colors colors={ colors } />\r\n                    <div className=\"instock\">In Stock: {inStock?'Yes':'No'}</div>\r\n                    <div className=\"fullspec\">\r\n                        <div className=\"spec\">FULL SPECS</div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cycle;","import React, { Component } from 'react';\r\nimport Cycle from './cycle/Cycle';\r\nconst CycleList = require('../res/cycleList.json')\r\n\r\n\r\nclass Main extends Component {\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"row container\">\r\n                {\r\n                    CycleList.map(obj => { return(<Cycle cycle={ obj } />)})\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport './App.css';\n\nimport Main from './comp/Main'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={ Main } />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}